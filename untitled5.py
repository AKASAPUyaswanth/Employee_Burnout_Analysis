# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m7dlcJltrOE7ePsmXn2fSLYjkEpt5LUD
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load the data
data = pd.read_excel('/content/employee_burnout_analysis-AI 1.xlsx')

# Display the first few rows
data.head()

# Handle missing values, but only for numeric columns
numeric_columns = data.select_dtypes(include=np.number).columns
data[numeric_columns] = data[numeric_columns].fillna(data[numeric_columns].mean())

# Encode categorical variables
label_encoder = LabelEncoder()
data['Gender'] = label_encoder.fit_transform(data['Gender'])
data['Company Type'] = label_encoder.fit_transform(data['Company Type'])
data['WFH Setup Available'] = label_encoder.fit_transform(data['WFH Setup Available'])

# Standardize numerical variables
scaler = StandardScaler()
data[['Mental Fatigue Score', 'Resource Allocation']] = scaler.fit_transform(data[['Mental Fatigue Score', 'Resource Allocation']])

# Display processed data
data.head()

# Distribution of Burn Rate
plt.figure(figsize=(10, 6))
sns.histplot(data['Burn Rate'], bins=20, kde=True, color='skyblue')
plt.title('Distribution of Burn Rate')
plt.xlabel('Burn Rate')
plt.ylabel('Frequency')
plt.show()

# Burn Rate by Company Type
plt.figure(figsize=(10, 6))
sns.boxplot(x='Company Type', y='Burn Rate', data=data, palette='Set2')
plt.title('Burn Rate by Company Type')
plt.xlabel('Company Type')
plt.ylabel('Burn Rate')
plt.show()

# Burn Rate vs. Mental Fatigue Score
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Mental Fatigue Score', y='Burn Rate', hue='Company Type', data=data, palette='Set1', alpha=0.6)
plt.title('Burn Rate vs. Mental Fatigue Score')
plt.xlabel('Mental Fatigue Score')
plt.ylabel('Burn Rate')
plt.show()

# Burn Rate by WFH Setup Available
plt.figure(figsize=(10, 6))
sns.boxplot(x='WFH Setup Available', y='Burn Rate', data=data, palette='pastel')
plt.title('Burn Rate by WFH Setup Available')
plt.xlabel('WFH Setup Available')
plt.ylabel('Burn Rate')
plt.show()

# Create new feature 'Tenure'
data['Tenure'] = pd.to_datetime('today').year - pd.to_datetime(data['Date of Joining']).dt.year

# Drop the original date column
data = data.drop(columns=['Date of Joining'])

# Display the updated data
data.head()

# Split the data into training and test sets
X = data.drop(columns=['Burn Rate', 'Employee ID'])  # Exclude 'Employee ID'

# Convert 'Burn Rate' to categorical by binning, if appropriate
y = pd.cut(data['Burn Rate'], bins=[0, 0.2, 0.4, 0.6, 0.8, 1], labels=[0, 1, 2, 3, 4], include_lowest=True) # Include the lowest value to avoid NaNs

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Check if there are still any missing values in the target
print(y_train.isnull().sum())

# If there are no missing values, proceed with model training
# Train a RandomForest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

import joblib

# Save the model
joblib.dump(model, 'burnout_model.pkl')

# Load the model
loaded_model = joblib.load('burnout_model.pkl')

# Predict using the loaded model
loaded_model.predict(X_test)